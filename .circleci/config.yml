version: 2.1

orbs:
  # Choose either one of the orbs below
  welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:5}
           # aws s3 rm "s3://${OldBucketID}" --recursive 

            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
        circle_workflow_id:
                 type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/AtDqgKbzPvEvc8HNqVyGGE/migration_<< parameters.circle_workflow_id >>)
          
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
             keys: [frontend-build]   
       - run:
           name: Front-end test
           command: |
               cd frontend
               npm install
               npm run test
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
             keys: [backend-build]
       - run:
           name: Back-end test
           command: |
                cd backend
                npm install
                npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache: 
                keys: [frontend-build]
       - run:
            name: frontend-scan
            command: |
                  cd frontend
                  npm install
                  npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
              keys: [backend-build]
       - run:
            name: backend-scan
            command: |
                 cd backend
                 npm install
                 npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-infra \
               --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:5}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-infra \
               --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update openssh-client git
      - add_ssh_keys:
              fingerprints: ["70:23:da:12:78:a3:71:d0:5c:d9:61:6e:06:67:d8:13"]
      - attach_workspace:
                at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl nodejs npm
            apk add --update ansible
            pip install awscli
            aws --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Prepare environment for backend build
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            cat ${PIPESTATUS[0]}
            status_code="${PIPESTATUS[0]}"
            if [[ ! "${status_code}" == 0 ]]; then
              return 1 
            fi
            if cat migrations_dump.txt | grep "has been executed successfully"; then          
              # If you are using kvdb.io, generate the bucket ID "AtDqgKbzPvEvc8HNqVyGGE" in your local terminal first
              curl https://kvdb.io/AtDqgKbzPvEvc8HNqVyGGE/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - revert-migrations: 
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - destroy-environment    
  
     # Here's where you will add some code to rollback on failure      

  #deploy-frontend:
  #  docker:
      # Docker image here that supports AWS CLI
  #  steps:
      # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
            # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
            # your code here
  #          export API_URL="http://${BACKEND_IP}:3030"
  #          echo "${API_URL}"
  #    - run:
  #        name: Deploy frontend objects
  #        command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
  #  docker:
      # Docker image here that supports Ansible
  #  steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
  #    - run:
  #        name: Install dependencies
  #        command: |
            # your code here
  #    - run:
  #        name: Deploy backend
  #        command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #smoke-test:
  #  docker:
      # Lightweight Docker image 
  #  steps:
      # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
            # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
            # your code here
  #    - run:
  #        name: Backend smoke test.
  #        command: |
            # your code here
  #    - run:
  #        name: Frontend smoke test.
  #        command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #cloudfront-update:
  #  docker:
      # Docker image here that supports AWS CLI
  #  steps:
      # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
            # your code here
  #    - run:
  #        name: Update cloudfront distribution
  #        command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#cleanup:
#    docker:
      # Docker image here
#    steps:
      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#     - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
              # your code here
#            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]